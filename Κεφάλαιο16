# Γράφημα Κέρδους-Ζημίας ενός Δικαιώματος Αγοράς (Call) – θέση αγοράς
# εισάγουμε τις βιβλιοθήκες που θα χρησιμοποιήσουμε
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# εισάγουμε τα δεδομένα για το δικαίωμα προαίρεσης
spot_price = 100
strike_price = 100
premium = 5
break_even= 105
# Το εύρος τιμών της υποκείμενης μετοχής στη λήξη
sT = np.arange(0.8*spot_price,1.2*spot_price,2)
# το κέρδος ή ζημία του δικαιώματος στη λήξη
payoff = np.where(sT > strike_price, sT - strike_price, 0) - premium
# Σχεδιάζουμε το γράγημα κέρδους/ ζημίας
plt.axhline(0, color='black', linestyle='-') # σχεδιάζουμε μια μαύρη γραμμή στο 0
plt.plot(sT, payoff,color='r')
plt.text(break_even, -1, 'Νεκρό Σημείο:'+ str(break_even)) # στο σημείο του νεκρού σημείου, εισάγουμε ένα κείμενο
plt.scatter(break_even, 0, marker="o")
plt.yticks(np.arange(-5, 15, step=5))
plt.title('Κέρδος/ Ζημία Αγοράς Δικαιώματος Αγοράς',fontsize=14)
plt.xlabel('Τιμή Υποκείμενης Μετοχής στη λήξη')
plt.ylabel('Κέρδος/ Ζημία')
plt.show()

# Γράφημα Κέρδους-Ζημίας ενός Δικαιώματος Αγοράς (Call) – θέση πώλησης
# εισάγουμε τις βιβλιοθήκες που θα χρησιμοποιήσουμε
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# εισάγουμε τα δεδομένα για το δικαίωμα προαίρεσης
spot_price = 100
strike_price = 100
premium = 5
break_even= 105
# Το εύρος τιμών της υποκείμενης μετοχής στη λήξη
sT = np.arange(0.8*spot_price,1.2*spot_price,2)
# το κέρδος ή ζημία του δικαιώματος στη λήξη
payoff = np.where(sT > strike_price, strike_price - sT, 0) + premium
# Σχεδιάζουμε το γράγημα κέρδους/ ζημίας
plt.axhline(0, color='black', linestyle='-') # σχεδιάζουμε μια μαύρη γραμμή στο 0
plt.plot(sT, payoff,color='r')
plt.text(break_even, +1, 'Νεκρό Σημείο:'+ str(break_even)) # στο σημείο του νεκρού σημείου, εισάγουμε ένα κείμενο
plt.scatter(break_even, 0, marker="o")
plt.yticks(np.arange(-5, 15, step=5))
plt.title('Κέρδος/ Ζημία Πώλησης Δικαιώματος Αγοράς',fontsize=14)
plt.xlabel('Τιμή Υποκείμενης Μετοχής στη λήξη')
plt.ylabel('Κέρδος/ Ζημία')
plt.show()

# Γράφημα Κέρδους-Ζημίας ενός Δικαιώματος Πώλησης (Put) – θέση αγοράς
# εισάγουμε τις βιβλιοθήκες που θα χρησιμοποιήσουμε
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# εισάγουμε τα δεδομένα για το δικαίωμα προαίρεσης
spot_price = 100
strike_price = 100
premium = 5
break_even= 95
# Το εύρος τιμών της υποκείμενης μετοχής στη λήξη
sT = np.arange(0.8*spot_price,1.2*spot_price,2)
# το κέρδος ή ζημία του δικαιώματος στη λήξη
payoff = np.where(sT < strike_price, strike_price - sT, 0) - premium
# Σχεδιάζουμε το γράγημα κέρδους/ ζημίας
plt.axhline(0, color='black', linestyle='-') # σχεδιάζουμε μια μαύρη γραμμή στο 0
plt.plot(sT,payoff,color='r')
plt.text(break_even, +1, 'Νεκρό Σημείο:'+ str(break_even)) # στο σημείο του νεκρού σημείου, εισάγουμε ένα κείμενο
plt.scatter(break_even, 0, marker="o")
plt.yticks(np.arange(-5, 15, step=5))
plt.title('Κέρδος/ Ζημία Αγοράς Δικαιώματος Πώλησης',fontsize=14)
plt.xlabel('Τιμή Υποκείμενης Μετοχής στη λήξη')
plt.ylabel('Κέρδος/ Ζημία')
plt.show()

# Γράφημα Κέρδους-Ζημίας ενός Δικαιώματος Πώλησης (Put) – θέση πώλησης
# εισάγουμε τις βιβλιοθήκες που θα χρησιμοποιήσουμε
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# εισάγουμε τα δεδομένα για το δικαίωμα προαίρεσης
spot_price = 100
strike_price = 100
premium = 5
break_even= 95
# Το εύρος τιμών της υποκείμενης μετοχής στη λήξη
sT = np.arange(0.8*spot_price,1.2*spot_price,2)
# το κέρδος ή ζημία του δικαιώματος στη λήξη
payoff = np.where(sT < strike_price, -strike_price + sT, 0) + premium
# Σχεδιάζουμε το γράγημα κέρδους/ ζημίας
plt.axhline(0, color='black', linestyle='-') # σχεδιάζουμε μια μαύρη γραμμή στο 0
plt.plot(sT,payoff,color='r')
plt.text(break_even, -1, 'Νεκρό Σημείο:'+ str(break_even)) # στο σημείο του νεκρού σημείου, εισάγουμε ένα κείμενο
plt.scatter(break_even, 0, marker="o")
plt.yticks(np.arange(-5, 15, step=5))
plt.title('Κέρδος/ Ζημία Πώλησης Δικαιώματος Πώλησης',fontsize=14)
plt.xlabel('Τιμή Υποκείμενης Μετοχής στη λήξη')
plt.ylabel('Κέρδος/ Ζημία')
plt.show()

# Υπολογισμός Θεωρητικής Τιμής Δικαιωμάτων Αγοράς με βάση το υπόδειγμα των Black&Sholes κάνοντας τους σχετικούς υπολογισμούς
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 100 # η τιμή εξάσκησης
r = 0.12 # το επιτόκιο δίχως κίνδυνο
sigma = 0.1 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
#αρχικά υπολογίζουμε d1 και d2
d1 = (log(S/K) + (r + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Call = S * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.2f}") # εμφανίζεται η τιμή του call option

# Υπολογισμός Θεωρητικής Τιμής Δικαιωμάτων με βάση το υπόδειγμα των Black&Sholes χρησιμοποιώντας τη βιβλιοθήκη py_vollib
import py_vollib 
from py_vollib.black_scholes  import black_scholes as bs
import numpy as np
# εισάγουμε τα δεδομένα για το δικαίωμα αγοράς ή πώλησης
C = 10 # η τρέχουσα αγοραία τιμή του δικαιώματος
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
K = 100 # η τιμή εξάσκησης του δικαιώματος
sigma = 0.1 #η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
r = 0.12 # το επιτόκιο δίχως κίνδυνο
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
flag = 'c' # ο τύπος του δικαιώματος: 'c' για δικαίωμα αγοράς (call) και 'p' για δικαίωμα πώλησης (put)
price = bs(flag, S, K, t, r, sigma)
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς: {price:.2f}") # εμφανίζεται η τιμή του  option

# Υπολογισμός Θεωρητικής Τιμής Δικαιωμάτων Πώλησης με βάση το υπόδειγμα των Black&Sholes κάνοντας τους σχετικούς υπολογισμούς
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 100 # η τιμή εξάσκησης
r = 0.03 # το επιτόκιο δίχως κίνδυνο
sigma = 0.3 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
d1 = (log(S/K) + (r + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Put = K * exp(-r * t) * norm.cdf(-d2) - S * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης  (Put): {Put:.2f}") # εμφανίζεται η τιμή του put option

# Υπολογισμός Θεωρητικής Τιμής Δικαιωμάτων με βάση το υπόδειγμα των Black&Sholes χρησιμοποιώντας τη βιβλιοθήκη py_vollib
import py_vollib 
from py_vollib.black_scholes  import black_scholes as bs
import numpy as np
# εισάγουμε τα δεδομένα για το δικαίωμα αγοράς ή πώλησης
C = 10 # η τρέχουσα αγοραία τιμή του δικαιώματος
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
K = 100 # η τιμή εξάσκησης του δικαιώματος
sigma = 0.3 #η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
r = 0.03 # το επιτόκιο δίχως κίνδυνο
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
flag = 'p' # ο τύπος του δικαιώματος: 'c' για δικαίωμα αγοράς (call) και 'p' για δικαίωμα πώλησης (put)
price = bs(flag, S, K, t, r, sigma)
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης: {price:.2f}") # εμφανίζεται η τιμή του  option

# Παράδειγμα 16-3
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
S = 26.93 # η τρέχουσα τιμή της υποκείμενης αξίας
t = 90/365 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 27.5 # η τιμή εξάσκησης
r = 0.051 # το επιτόκιο δίχως κίνδυνο
sigma = 0.3216 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
d1 = (log(S/K) + (r + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Call = S * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
Put = K * exp(-r * t) * norm.cdf(-d2) - S * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.2f}") # εμφανίζεται η τιμή του call option
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης  (Put): {Put:.2f}") # εμφανίζεται η τιμή του put option

# Παράδειγμα 16-3 (με μέρισμα)
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
d = 0.3 # μέρισμα που θα δώσει η μετοχή
S = 26.93 - d*exp(-r * 30/365) # η τρέχουσα τιμή της υποκείμενης αξίας - παρούσα αξία μερισμάτων
t = 90/365 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 27.5 # η τιμή εξάσκησης
r = 0.051 # το επιτόκιο δίχως κίνδυνο
sigma = 0.3216 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
d1 = (log(S/K) + (r + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Call = S * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
Put = K * exp(-r * t) * norm.cdf(-d2) - S * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.2f}") # εμφανίζεται η τιμή του call option
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης  (Put): {Put:.2f}") # εμφανίζεται η τιμή του put option

# Παράδειγμα 16-4
# εισάγουμε τις βιβλιοθήκες που θα χρειαστούμε
import numpy as np
import math
# εισάγουμε τα δεδομένα
S0  = 60 # η τιμή της μετοχής σήμερα
T = 1 # ο χρόνος (σε έτη)
ST_u = 90 # η τιμή της μετοχής την επόμενη περίοδο σε περίπτωση ανόδου
ST_d = 50 # η τιμή της μετοχής την επόμενη περίοδο σε περίπτωση πτώσης
K = 60 # η τιμή εξάσκησης του δικαιώματος αγοράς
r = 0.04 # το επιτόκιο δίχως κίνδυνο
# υπολογίζουμε τη θεωρητική τιμή με βάση το διωνυμικό υπόδειγμα
u = ST_u/S0
d = ST_d/S0
c_u = max(ST_u-K,0) # η αξία του call σε περίπτωση ανόδου
c_d = max(ST_d-K,0) # η αξία του call σε περίπτωση πτώσης
p_u = (np.exp(r*T) - d)/(u - d) # oι ουδέτερες στον κίνδυνο πιθανότητες (risk neutral probabilities) π
p_d = 1 - p_u # oι ουδέτερες στον κίνδυνο πιθανότητες (risk neutral probabilities) 1-π
call = np.exp(-r*T)*(c_u*p_u + c_d*p_d) # υπολογίζουμε την αξία του δικαιώματος αγοράς σήμερα
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {call:.2f}") # εμφανίζουμε την αξία του δικαιώματος αγοράς σήμερα

# Παράδειγμα 16-5
# εισάγουμε τις βιβλιοθήκες που θα χρειαστούμε
import numpy as np
import math
# εισάγουμε τα δεδομένα
S0  = 50 # η τιμή της μετοχής σήμερα
T = 1 # ο χρόνος (σε έτη)
N = 1 # ο αριθμός των βημάτων του διωνυμικού υποδείγματος
sigma = 0.20 # η τυπική απόκλιση της υποκείμενης μετοχής
K = 50 # η τιμή εξάσκησης του δικαιώματος αγοράς
r = 0.05 # το επιτόκιο δίχως κίνδυνο
# υπολογίζουμε τη θεωρητική τιμή με βάση το διωνυμικό υπόδειγμα
u = np.exp(sigma * np.sqrt(T))
d =  np.exp(-sigma * np.sqrt(T))
ST_u = S0 * u # η τιμή της μετοχής την επόμενη περίοδο σε περίπτωση ανόδου
ST_d = S0 * d # η τιμή της μετοχής την επόμενη περίοδο σε περίπτωση πτώσης
c_u = max(ST_u-K,0) # η αξία του call σε περίπτωση ανόδου
c_d = max(ST_d-K,0) # η αξία του call σε περίπτωση πτώσης
p_u = (np.exp(r*T) - d) / (u - d) # oι ουδέτερες στον κίνδυνο πιθανότητες (risk neutral probabilities) π
p_d = 1 - p_u # oι ουδέτερες στον κίνδυνο πιθανότητες (risk neutral probabilities) 1-π
call_price = np.exp(-r*T)*(c_u*p_u + c_d*p_d) # υπολογίζουμε την αξία του δικαιώματος αγοράς σήμερα
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {call_price:.2f}") # εμφανίζουμε την αξία του δικαιώματος αγοράς σήμερα

# Διωνυμικό Υπόδειγμα Τιμολόγησης (Binomial Pricing Model)
# προσαρμογή κώδικα από https://www.codearmo.com/python-tutorial/options-trading-binomial-pricing-model
# εισάγουμε τις βιβλιοθήκες που θα χρειαστούμε
import numpy as np
import math
# εισάγουμε τα δεδομένα
S0  = 50 # η τιμή της μετοχής σήμερα
T = 1 # ο χρόνος (σε έτη)
N = 2 # ο αριθμός των βημάτων του διωνυμικού υποδείγματος
sigma = 0.20 # η τυπική απόκλιση της υποκείμενης μετοχής
K = 50 # η τιμή εξάσκησης του δικαιώματος αγοράς
r = 0.05 # το επιτόκιο δίχως κίνδυνο
# υπολογίζουμε τη θεωρητική τιμή με βάση το διωνυμικό υπόδειγμα
dt = T/N
u = np.exp( sigma * np.sqrt(dt) )
d =  np.exp( -sigma * np.sqrt(dt) )
p = ( np.exp(r*dt) - d) / (u -d)
for k in reversed(range(N+1)):
    ST = S0 * u**k * d ** (N-k)
def combos(n, i):
    return math.factorial(n) / (math.factorial(n-i)*math.factorial(i))
for k in reversed(range(N+1)):
    p_star = combos(N, k)*p**k *(1-p)**(N-k)
C=0   
for k in reversed(range(N+1)):
    p_star = combos(N, k)*p**k *(1-p)**(N-k)
    ST = S0 * u**k * d ** (N-k)
    C += max(ST-K,0)*p_star
call = np.exp(-r*T)*C # υπολογίζουμε την αξία του δικαιώματος αγοράς σήμερα
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {call:.2f}") # εμφανίζουμε την αξία του δικαιώματος αγοράς σήμερα

# Υπολογισμός Θεωρητικής Τιμής Δικαιωμάτων με βάση το Διωνυμικό υπόδειγμα

# εισάγουμε τις βιβλιοθήκες που θα χρειαστούμε
import numpy as np
import math

# εισάγουμε τα δεδομένα
S0  = 50 # η τιμή της μετοχής σήμερα
T = 1 # ο χρόνος (σε έτη)
N = 1000 # ο αριθμός των βημάτων του διωνυμικού υποδείγματος
sigma = 0.20 # η τυπική απόκλιση της υποκείμενης μετοχής
K = 50 # η τιμή εξάσκησης του δικαιώματος αγοράς
r = 0.05 # το επιτόκιο δίχως κίνδυνο
# υπολογίζουμε τη θεωρητική τιμή με βάση το διωνυμικό υπόδειγμα
dt = T/N
u = np.exp( sigma * np.sqrt(dt) )
d =  np.exp( -sigma * np.sqrt(dt) )
p = ( np.exp(r*dt) - d) / (u -d)
for k in reversed(range(N+1)):
    ST = S0 * u**k * d ** (N-k)
def combos(n, i):
    return math.factorial(n) / (math.factorial(n-i)*math.factorial(i))
for k in reversed(range(N+1)):
    p_star = combos(N, k)*p**k *(1-p)**(N-k)
C=0   
for k in reversed(range(N+1)):
    p_star = combos(N, k)*p**k *(1-p)**(N-k)
    ST = S0 * u**k * d ** (N-k)
    C += max(ST-K,0)*p_star
call = np.exp(-r*T)*C # υπολογίζουμε την αξία του δικαιώματος αγοράς σήμερα
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {call:.3f}") # εμφανίζουμε την αξία του δικαιώματος αγοράς σήμερα

# Υπολογισμός Θεωρητικής Τιμής Δικαιωμάτων με βάση το υπόδειγμα των Black&Sholes
# εισάγουμε τις βιβλιοθήκες που θα χρειαστούμε
from scipy.stats import norm
from math import *
# εισάγουμε τα δεδομένα
S = 50 # η τρέχουσα τιμή της υποκείμενης αξίας
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 50 # η τιμή εξάσκησης
r = 0.05 # το επιτόκιο δίχως κίνδυνο
s = 0.20 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
d1 = (log(S/K) + (r + (s ** 2)/2) * t)/(s * sqrt(t))
d2 = d1 - s * sqrt(t)
Call = S * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
Put = K * exp(-r * t) * norm.cdf(-d2) - S * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.3f}") # εμφανίζεται η τιμή του call option

# Υπολογισμός Τεκμαρτής Μεταβλητότητας Δικαιώματος Αγοράς
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from scipy.optimize import minimize_scalar
from math import *
# εισάγουμε τα δεδομένα για τους παράγοντες που καθορίζουν την τιμή του δικαιώματος
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 100 # η τιμή εξάσκησης
r = 0.03 # το επιτόκιο δίχως κίνδυνο
sigma = 0.3 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
# ορίζουμε μια συνάρτηση με την ονομασία Call που υπολογίζει τη θεωρητική τιμή ενός δικαιώματος αγοράς
def Call(S, K, t, r, sigma):
    d1 = (log(S/K) + (r + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
    d2 = d1 - sigma * sqrt(t)
    return S * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2)
# ορίζουμε μια συνάρτηση με την ονομασία IV που για μια τιμή του δικαιώματος αγοράς, επιστρέφει την τεκμαρτή μεταβλητότητα
def IV(call_value):
    def function(sigma):
        return abs(Call(S, K, t, r, sigma) - call_value)
    res = minimize_scalar(function, bounds=(0.01,6), method='bounded')
    return print(f"Τεκμαρτή Μεταβλητότητα: {res.x:.2%}") # εμφανίζεται η τεκμαρτή μεταβλητότητα του call

# Υπολογισμός Τεκμαρτής Μεταβλητότητας Δικαιώματος Πώλησης
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from scipy.optimize import minimize_scalar
from math import *
# εισάγουμε τα δεδομένα για τους παράγοντες που καθορίζουν την τιμή του δικαιώματος
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
K = 100 # η τιμή εξάσκησης
r = 0.03 # το επιτόκιο δίχως κίνδυνο
sigma = 0.3 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
# ορίζουμε μια συνάρτηση με την ονομασία Put που υπολογίζει τη θεωρητική τιμή ενός δικαιώματος πώλησης
def Put(S, K, t, r, sigma):
    d1 = (log(S/K) + (r + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
    d2 = d1 - sigma * sqrt(t)
    return K * exp(-r * t) * norm.cdf(-d2) - S * norm.cdf(-d1)
# ορίζουμε μια συνάρτηση με την ονομασία IV που για μια τιμή του δικαιώματος πώλησης, επιστρέφει την τεκμαρτή μεταβλητότητα
def IV(put_value):
    def function(sigma):
        return abs(Put(S, K, t, r, sigma) - put_value)
    res = minimize_scalar(function, bounds=(0.01,6), method='bounded')
    return print(f"Τεκμαρτή Μεταβλητότητα: {res.x:.2%}") # εμφανίζεται η τεκμαρτή μεταβλητότητα του put

# Υπολογισμός συντελεστών ευαισθησίας χρησιμοποιώντας τη βιβλιοθήκη py_vollib
import py_vollib 
from py_vollib.black_scholes.greeks.analytical import delta 
from py_vollib.black_scholes.greeks.analytical import gamma
from py_vollib.black_scholes.greeks.analytical import rho
from py_vollib.black_scholes.greeks.analytical import theta
from py_vollib.black_scholes.greeks.analytical import vega
import numpy as np
# εισάγουμε τα δεδομένα για το δικαίωμα αγοράς ή πώλησης
S = 100 # η τρέχουσα τιμή της υποκείμενης αξίας
K = 100 # η τιμή εξάσκησης του δικαιώματος
sigma = 0.3 #η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
r = 0.03 # το επιτόκιο δίχως κίνδυνο
t = 1 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
flag = 'c' # ο τ΄υπος του δικαιώματος: 'c' για δικαίωμα αγοράς (call) και 'p' για δικαίωμα πώλησης (put)
delta_option = delta(flag, S, K, t, r, sigma)
gamma_ option = gamma(flag, S, K, t, r, sigma)
rho_ option = rho(flag, S, K, t, r, sigma)
theta_option = theta(flag, S, K, t, r, sigma)
vega_option = vega(flag, S, K, t, r, sigma)
print(f"Συντελεστής δ Δικαιώματος: {delta_option:.4f}") # εμφανίζεται ο συντελεστής δ
print(f"Συντελεστής γ Δικαιώματος: {gamma_option:.4f}") # εμφανίζεται ο συντελεστής γ
print(f"Συντελεστής ρ Δικαιώματος: {rho_option:.4f}") # εμφανίζεται ο συντελεστής ρ
print(f"Συντελεστής θ Δικαιώματος: {theta_option:.4f}") # εμφανίζεται ο συντελεστής θ
print(f"Συντελεστής Vega Δικαιώματος: {vega_option:.4f}") # εμφανίζεται ο Συντελεστής Vega

# Παράδειγμα 16-6
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
# εισάγουμε τα δεδομένα για το δικαίωμα αγοράς ή πώλησης
S = 1488.41 # η τρέχουσα τιμή της υποκείμενης αξίας
K = 1470 # η τιμή εξάσκησης του δικαιώματος
sigma = 0.2274 #η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
r = 0.049404 # το επιτόκιο δίχως κίνδυνο
y = 0.02013 # η μέση ετήσια μερισματική απόδοση της υποκείμενης αξίας
t = 108/365 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
d1 = (log(S/K) + (r - y + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Call = S * exp(-y * t) * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
Put = K * exp(-r * t) * norm.cdf(-d2) - S * exp(-y * t) * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
delta_call = exp(-y * t) * norm.cdf(d1)
delta_put = exp(-y * t) * norm.cdf(d1) - 1
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.2f}") # εμφανίζεται η τιμή του call option
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης  (Put): {Put:.2f}") # εμφανίζεται η τιμή του put option
print(f"Συντελεστής δ Δικαιώματος Αγοράς: {delta_call:.4f}") # εμφανίζεται ο συντελεστής δ του call
print(f"Συντελεστής δ Δικαιώματος Πώλησης: {delta_put:.4f}") # εμφανίζεται ο συντελεστής δ του put

# Παράδειγμα 16-7
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
# εισάγουμε τα δεδομένα για το δικαίωμα αγοράς ή πώλησης
S = 1.4414 # η τρέχουσα τιμή της υποκείμενης αξίας
K = 1.45 # η τιμή εξάσκησης του δικαιώματος
sigma = 0.08 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
r_d = 0.05 # Επιτόκιο ακίνδυνου αξιογράφου εγχώριου νομίσματος
r_fo = 0.04 # Επιτόκιο ακίνδυνου αξιογράφου ξένου νομίσματος
t = 35/365 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
d1 = (log(S/K) + (r_d - r_fo + (sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Call = S * exp(-r_fo * t) * norm.cdf(d1) - K * exp(-r_d * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
Put = K * exp(-r_d * t) * norm.cdf(-d2) - S * exp(-r_fo * t) * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
delta_call = exp(-r_fo * t) * norm.cdf(d1)
delta_put = exp(-r_fo * t) * norm.cdf(d1) – 1
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.4f}") # εμφανίζεται η τιμή του call option
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης  (Put): {Put:.4f}") # εμφανίζεται η τιμή του put option
print(f"Συντελεστής δ Δικαιώματος Αγοράς: {delta_call:.4f}") # εμφανίζεται ο συντελεστής δ του call
print(f"Συντελεστής δ Δικαιώματος Πώλησης: {delta_put:.4f}") # εμφανίζεται ο συντελεστής δ του put

# Παράδειγμα 16-8
# εισάγουμε τις βιβλιοθήκες που χρειαζόμαστε
from scipy.stats import norm
from math import *
# εισάγουμε τα δεδομένα για το δικαίωμα αγοράς ή πώλησης
F = 13440 # η τρέχουσα τιμή του ΣΜΕ
K = 13500 # η τιμή εξάσκησης του δικαιώματος
sigma = 0.2253 # η ετησιοποιημένη τυπική απόκλιση της υποκείμενης αξίας κατά τη διάρκεια ζωής του δικαιώματος
r = 0.043 # Επιτόκιο ακίνδυνου αξιογράφου
t = 35/365 # ο χρόνος μέχρι τη λήξη του δικαιώματος σε χρόνια
d1 = (log(F/K) + ((sigma ** 2)/2) * t)/(sigma * sqrt(t))
d2 = d1 - sigma * sqrt(t)
Call = F * exp(-r * t) * norm.cdf(d1) - K * exp(-r * t) * norm.cdf(d2) # υπολογίζεται η τιμή του call option
Put = K * exp(-r * t) * norm.cdf(-d2) - F * exp(-r * t) * norm.cdf(-d1) # υπολογίζεται η τιμή του put option
delta_call = exp(-r * t) * norm.cdf(d1)
delta_put = exp(-r * t) * norm.cdf(d1) - 1
print(f"Θεωρητική Τιμή Δικαιώματος Αγοράς (Call): {Call:.2f}") # εμφανίζεται η τιμή του call option
print(f"Θεωρητική Τιμή Δικαιώματος Πώλησης  (Put): {Put:.2f}") # εμφανίζεται η τιμή του put option
print(f"Συντελεστής δ Δικαιώματος Αγοράς: {delta_call:.4f}") # εμφανίζεται ο συντελεστής δ του call
print(f"Συντελεστής δ Δικαιώματος Πώλησης: {delta_put:.4f}") # εμφανίζεται ο συντελεστής δ του put
